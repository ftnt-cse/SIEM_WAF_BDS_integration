#!/usr/bin/env python

from __future__ import absolute_import
from pexpect import pxssh
import os, sys, re, logging, pexpect,xml.dom.minidom, base64


# default logging level is CRITICAL, change level to DEBUG if needed
logging.basicConfig(stream=sys.stderr, level=logging.DEBUG)
#logging.basicConfig(stream=sys.stderr, level=logging.CRITICAL)

#
# Some constants to set according to your environment
#
base_directory = '/var/www/html/images' 	# where to start to look for the uploaded malicious file
hostname = 'Replace_With_Webserver_IP'	# change as needed
username = 'admin'		# web server valid user with the right privilege to delete uploaded files
password = base64.b64decode('') # not a serious protection though, the password encoded in base64

#Parse incidents attributes from incident.xml
def xml_parser(fileName):
    myfile = sys.argv[1]
    doc = xml.dom.minidom.parse(myfile)
    incident = doc.getElementsByTagName
    nodes = doc.getElementsByTagName('incidentDetails')
    if nodes.length < 1:
        logging.debug("no incident details found!")
        exit()
    else:
        parsed_dict = {}
        sourceNode = nodes[0]
    #Walk the incidentdetails looking for the attributes
        for node in sourceNode.childNodes :
            if node.nodeType == node.ELEMENT_NODE:
                if node.getAttribute("attribute") == "hashCode":
                    parsed_dict['hashCode'] = node.firstChild.data
                    logging.debug('XML parser:')
                    logging.debug(parsed_dict)
                    return(parsed_dict['hashCode'])   
    return(1)

def delete_remote_file(hostname,username,password,hashcode):
    try:
        s = pxssh.pxssh()
        s.login(hostname, username, password)
        command='for file in $(find '+base_directory+' -type f -exec md5sum {} + | egrep '+hashcode+'$|awk \'{ print $2 }\');do rm -fv $file && echo $file has been deleted >> /tmp/deleted.files.log;done'
        s.sendline(command)   # run a command
        s.prompt()
        result = ''.join(s.before.splitlines())
        print result        
        if 'removed' in result:
             logging.debug(hashcode +' has been removed from '+ hostname)
        else:
             logging.debug(hashcode +' doesn t exist on '+ hostname + ' file system')

        s.logout()

    except pxssh.ExceptionPxssh as e:
        print("ssh failed on login.")
        print(e)

def main():
#	parsed_data=xml_parser(sys.argv[1])
    hashcode = xml_parser(sys.argv[1])
    if hashcode != 1:
        delete_remote_file(hostname,username,password,hashcode)


if __name__ == "__main__":
    main()
